# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: go_test
on: [push, pull_request]
jobs:

  go_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:

    - name: Set up Go 1.22
      uses: actions/setup-go@v5
      with:
        go-version: 1.22
      id: go

    - name: Check out code
      uses: actions/checkout@v4

    - name: Get dependencies
      run: |
            go mod download
    - name: Build
      run: |
            go build ./...

    - name: Test
      run: |
            go test ./...

  go_spec_test_coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:

    - name: Set up Go 1.22
      uses: actions/setup-go@v5
      with:
        go-version: 1.22
      id: go

    - name: Check out code
      uses: actions/checkout@v4

    - name: Get dependencies
      run: |
            go mod download
    - name: Build
      run: |
            go build ./...

    - name: Spec Test Coverage
      run: |
            # Output the full report to console.
            go run tests/spectests/cmd/analyzer/analyzer.go


  go_spec_test_badge_update:
    # change later to on merge: github.event.pull_request.merged
    # Merged onto the default branch.
    # later to enable for default branch, add: && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:

    - name: Set up Go 1.22
      uses: actions/setup-go@v2
      with:
        go-version: 1.22
      id: go

    - name: Check out code
      uses: actions/checkout@v3

    - name: Get dependencies
      run: |
            go mod download
    - name: Build
      run: |
            go build ./...

    - name: Setup Env Variables
      id: vars
      # env:
      #   BADGE_DIR: coverage-reports
      #   BADGE_PATH: coverage-reports/spec-coverage.json
      #   BRANCH: gh-pages
      run: |
            # Save total test coverage to a variable.
            SPEC_COVERAGE=$( \
              go run tests/spectests/cmd/analyzer/analyzer.go \
              | grep 'Not Skipped' --max-count=1 \
              | cut -d' ' -f 4 \
              | tr -d "()"
            )
            echo "spec_coverage=$SPEC_COVERAGE" >> "${GITHUB_OUTPUT}"

            # BADGE_DIR="coverage-reports"
            echo "dir=coverage-reports" >> "${GITHUB_OUTPUT}"
            # BADGE_PATH="coverage-reports/spec-coverage.json"
            echo "path=coverage-reports/spec-coverage.json" >> "${GITHUB_OUTPUT}"
            # BRANCH="gh-pages"
            echo "branch=gh-pages" >> "${GITHUB_OUTPUT}"

    - name: Check out Github Pages branch
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.vars.outputs.branch }}

    - name: Create destination directory and file
      #if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
      run: |
            echo "${{ steps.vars.outputs.branch }}"
            mkdir -p "${{ steps.vars.outputs.dir }}"
  
            # Place SPEC_COVERAGE into json output.
            JSON_DATA="{\"schemaVersion\":1,\"color\":\"brightgreen\",\"label\":\"CQL Spec Test Coverage\",\"message\":\"${{ steps.vars.outputs.spec_coverage }}\"}"
            echo $JSON_DATA > ${{ steps.vars.outputs.path }}

    - name: Commit badge data
      continue-on-error: true
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "${{ steps.vars.outputs.path }}"
        git commit -m "Add/Update badge"
        git pull

    - name: Push badge commit
      uses: ad-m/github-push-action@40bf560936a8022e68a3c00e7d2abefaf01305a6  # v0.6.0
      if: ${{ success() }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.vars.outputs.branch }}

    #- name: Update Coverage Badge
      # GitHub actions: default branch variable
      # https://stackoverflow.com/questions/64781462/github-actions-default-branch-variable
      #if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
      #uses: we-cli/coverage-badge-action@main